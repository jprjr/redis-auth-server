worker_processes <%= worker_processes %>;
error_log stderr <%= log_level %>;
pid logs/nginx.pid;
daemon off;

events {
  worker_connections 1024;
}

http {
  access_log off;
  lua_shared_dict logins 1m;
  lua_package_path "<%= lua_package_path %>";
  lua_package_cpath "<%= lua_package_cpath %>";
  server {
    listen <%= listen %>;
    lua_code_cache on;
    location / {
      content_by_lua_block {
        local redis = require'resty.redis';
        local base64_decode = ngx.decode_base64;
        local base64_encode = ngx.encode_base64;
        local hmac_sha1 = ngx.hmac_sha1;
        local config = require'config';

        local authorization = ngx.req.get_headers()['authorization'];

        if not authorization then
          ngx.log(ngx.DEBUG,"no authorization header, returning HTTP_UNAUTHORIZED");
          ngx.status = ngx.HTTP_UNAUTHORIZED;
          ngx.header['Content-Type'] = "text/plain";
          ngx.header['WWW-Authenticate'] = 'Basic realm="' .. config.realm .. '"';
          ngx.say("Please authenticate")
          ngx.exit(ngx.HTTP_UNAUTHORIZED);
        end

        local userpassword = base64_decode(authorization:match("Basic%s+(.*)"));
        local username, password = userpassword:match("([^:]*):(.*)")
        local password_test = base64_encode(hmac_sha1(password,"success"))

        local user = ngx.shared.logins:get(username)

        if user and user == password_test then
          ngx.log(ngx.DEBUG,"response found in cache, returning");
          ngx.status = ngx.HTTP_NO_CONTENT;
          ngx.exit(ngx.HTTP_NO_CONTENT)
        end

        local red = redis:new()
        local ok, err = red:connect(config.redis_host,config.redis_port)

        if not ok then
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        local res, err = red:get(config.redis_prefix .. username)
        if not res then
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        if res == ngx.null or res == password_test then
          red:set(config.redis_prefix .. username, password_test)
          ngx.shared.logins:set(username,password_test,config.expire_time)
          ngx.status = ngx.HTTP_NO_CONTENT;
          ngx.exit(ngx.HTTP_NO_CONTENT)
        end

        ngx.status = ngx.HTTP_FORBIDDEN;
        ngx.exit(ngx.HTTP_FORBIDDEN);
      }
    }
  }
}
           
